#include <iostream>
#include <fstream>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <termios.h>
#include "game.h"
#include "params.h"
#include "gridmanagement.h"
#include "Nos_fichiers/menu.h"
#include <map>

using namespace std;

template <class T, class U>
void ShowMap (const map<T,U> & AMap){
    for (const pair <T,U> & Val : AMap)                cout << "Cle : " << Val.first << "  "             << "Valeur : " << Val.second << endl;
    cout << endl;
}// ShowMap ()

void set_input_mode (void)
{
    struct termios tattr;

    /* Make sure stdin is a terminal. */
    if (!isatty (STDIN_FILENO))
    {
        fprintf (stderr, "Not a terminal.\n");
        exit (EXIT_FAILURE);
    }

    /* Set the funny terminal modes. */
    tcgetattr (STDIN_FILENO, &tattr);
    tattr.c_lflag &= ~(ICANON|ECHO); /* Clear ICANON and ECHO. */
    tattr.c_cc[VMIN] = 0;
    tattr.c_cc[VTIME] = 3;
    tcsetattr (STDIN_FILENO, TCSAFLUSH, &tattr);
}


//unsigned piece(CMat & Mat, CPosition & Pos)
//{
//    unsigned point=0;
//    if(Mat[Pos.first][Pos.second] == '.')
//        ++point;
//    return point;
//}

void MoveToken (CMat & Mat, const char & Move, CPosition & Pos, unsigned & point)
{
    char car = Mat [Pos.first][Pos.second];
    Mat [Pos.first][Pos.second] = KEmpty;
    switch (Move)
    {
    case 'A':

        if (Pos.first == 0) {
            Pos.first = Mat.size()-1;
        }
        else {
            -- Pos.first;
        }

        if (Pos.second == 0) {
            Pos.second = Mat[Pos.first].size()-1;
        }
        else {
            -- Pos.second;
        }

        if(Mat[Pos.first][Pos.second] == '.')
        {
            ++point;

        }

        if(Mat[Pos.first][Pos.second] == '#')
        {
            ++Pos.second;
            ++Pos.first;
            break;
        }

        if (Mat[Pos.first][Pos.second] == 'o')
        {
            ++Pos.second;
            ++Pos.first;
            break;
        }


        if (Mat[Pos.first][Pos.second] == Mat[12][29]) {
            Pos.first = 2;
            Pos.second = 4;
            break;
        }

        if (Mat[Pos.first][Pos.second] == Mat[10][3]) {
            Pos.first = 8;
            Pos.second = 17;
        }

        if (Mat[Pos.first][Pos.second] == Mat[4][31]) {
            Pos.first = 6;
            Pos.second = 17;
        }
        break;
    case 'Z':

        if (Pos.first == 0) {
            Pos.first = Mat.size()-1;
            break;
        }

        if(Mat[Pos.first-1][Pos.second] == '#')
        {
            break;
        }



        if(Mat[Pos.first-1][Pos.second] == 'o')
        {
            break;
        }

        else {
            --Pos.first;
        }

        if(Mat[Pos.first][Pos.second] == '.')
        {
            ++point;

        }

        if (Mat[Pos.first][Pos.second] == Mat[12][29]) {
            Pos.first = 2;
            Pos.second = 4;
            break;
        }


        if (Mat[Pos.first][Pos.second] == Mat[10][3]) {
            Pos.first = 8;
            Pos.second = 17;
            break;
        }


        if (Mat[Pos.first][Pos.second] == Mat[4][31]) {
            Pos.first = 6;
            Pos.second = 17;
            break;
        }

        break;

    case 'E':
        if (Pos.first == 0) {
            Pos.first = Mat.size()-1;
        }
        else {
            -- Pos.first;
        }

        if (Pos.second == Mat[Pos.first].size()-1) {
            Pos.second = 0;
        }
        else {
            ++ Pos.second;
        }

        if(Mat[Pos.first][Pos.second] == '.')
        {
            ++point;

        }

        if(Mat[Pos.first][Pos.second] == '#')
        {
            --Pos.second;
            ++Pos.first;
            break;
        }
        if(Mat[Pos.first][Pos.second] == 'o')
        {
            --Pos.second;
            ++Pos.first;
            break;
        }

        if (Mat[Pos.first][Pos.second] == Mat[12][29]) {
            Pos.first = 2;
            Pos.second = 4;
            break;
        }


        if (Mat[Pos.first][Pos.second] == Mat[10][3]) {
            Pos.first = 8;
            Pos.second = 17;
        }

        if (Mat[Pos.first][Pos.second] == Mat[4][31]) {
            Pos.first = 6;
            Pos.second = 17;
        }

        break;
    case 'Q':

        if (Pos.second == 0) {
            Pos.second = Mat[Pos.first].size()-1;
            break;
        }

        if(Mat[Pos.first][Pos.second-1] == '#')
        {

            break;
        }
        if(Mat[Pos.first][Pos.second-1] == 'o')
        {

            break;
        }

        else {
            --Pos.second;
        }

        if(Mat[Pos.first][Pos.second] == '.')
        {
            ++point;

        }

        if (Mat[Pos.first][Pos.second] == Mat[12][29]) {
            Pos.first = 2;
            Pos.second = 4;
            break;
        }

        if (Mat[Pos.first][Pos.second] == Mat[10][3]) {
            Pos.first = 8;
            Pos.second = 17;
        }

        if (Mat[Pos.first][Pos.second] == Mat[4][31]) {
            Pos.first = 6;
            Pos.second = 17;
        }

        break;
    case 'D':

        if (Pos.second == Mat[Pos.first].size()-1) {
            Pos.second = 0;
            break;
        }

        if(Mat[Pos.first][Pos.second+1] == '#')
        {

            break;
        }

        if(Mat[Pos.first][Pos.second+1] == 'o')
        {

            break;
        }

        else {
            ++Pos.second;
        }

        if(Mat[Pos.first][Pos.second] == '.')
        {
            ++point;

        }

        if (Mat[Pos.first][Pos.second] == Mat[2][5]) {
            Pos.first = 12;
            Pos.second = 30;
            break;
        }


        if (Mat[Pos.first][Pos.second] == Mat[10][3]) {
            Pos.first = 8;
            Pos.second = 17;
        }

        if (Mat[Pos.first][Pos.second] == Mat[4][31]) {
            Pos.first = 6;
            Pos.second = 17;
        }



        break;
    case 'W':

        if (Pos.first == Mat.size()-1) {
            Pos.first = 0;

        }
        else {
            ++ Pos.first;
        }

        if (Pos.second == 0) {
            Pos.second = Mat[Pos.first].size()-1;

        }

        else {
            -- Pos.second;
        }

        if(Mat[Pos.first][Pos.second] == '.')
        {
            ++point;

        }

        if(Mat[Pos.first][Pos.second] == '#')
        {
            ++Pos.second;
            --Pos.first;
            break;
        }
        if(Mat[Pos.first][Pos.second] == 'o')
        {
            ++Pos.second;
            --Pos.first;
            break;
        }


        if (Mat[Pos.first][Pos.second] == Mat[2][5]) {
            Pos.first = 12;
            Pos.second = 30;
            break;
        }

        if (Mat[Pos.first][Pos.second] == Mat[10][3]) {
            Pos.first = 8;
            Pos.second = 17;
        }

        if (Mat[Pos.first][Pos.second] == Mat[4][31]) {
            Pos.first = 6;
            Pos.second = 17;
        }
        break;
    case 'S':

        if (Pos.first == Mat.size()-1) {
            Pos.first = 0;
            break;
        }

        if(Mat[Pos.first+1][Pos.second] == '#')
        {

            break;
        }
        if(Mat[Pos.first+1][Pos.second] == 'o' )
        {

            break;
        }
        else {
            ++Pos.first;
        }

        if(Mat[Pos.first][Pos.second] == '.')
        {
            ++point;

        }

        if (Mat[Pos.first][Pos.second] == Mat[2][5]) {
            Pos.first = 12;
            Pos.second = 30;
            break;
        }

        if (Mat[Pos.first][Pos.second] == Mat[10][3]) {
            Pos.first = 8;
            Pos.second = 17;
        }

        if (Mat[Pos.first][Pos.second] == Mat[4][31]) {
            Pos.first = 6;
            Pos.second = 17;
        }

        break;
    case 'C':

        if (Pos.first == Mat.size()-1) {
            Pos.first = 0;
        }

        else {
            ++ Pos.first;
        }

        if (Pos.second == Mat[Pos.first].size()-1) {
            Pos.second = 0;
        }

        else {
            ++ Pos.second;
        }

        if(Mat[Pos.first][Pos.second] == '.')
        {
            ++point;

        }

        if(Mat[Pos.first][Pos.second] == '#')
        {
            --Pos.second;
            --Pos.first;
            break;
        }

        if(Mat[Pos.first][Pos.second] == 'o')
        {
            --Pos.second;
            --Pos.first;
            break;
        }


        if (Mat[Pos.first][Pos.second] == Mat[2][5]) {
            Pos.first = 12;
            Pos.second = 30;
            break;
        }

        if (Mat[Pos.first][Pos.second] == Mat[10][3]) {
            Pos.first = 8;
            Pos.second = 17;
        }

        if (Mat[Pos.first][Pos.second] == Mat[4][31]) {
            Pos.first = 6;
            Pos.second = 17;
        }

        break;
    }
    Mat [Pos.first][Pos.second] = car;
} //MoveToken ()



void ChangClassement(unsigned & PartyNum, string & pseudo, const string & nomfichier){
    ofstream ofs (nomfichier);
    if (ofs.is_open() != true)
    {
        cout << "Erreur" << endl;
        return;
    }

    ofs << "Classement \n" << endl;
    ofs << "Pseudo : " << pseudo << endl;
    ofs << "Nombre de tours : " << PartyNum << endl;
    ofs << "Points : ";


}



bool PileouFace (unsigned valeur){
    bool resultat;
    unsigned cote;
    srand(time(NULL));
    cote = rand() % 2 + 1;
    if (valeur == cote)
    {
        resultat = true;
    }
    else {
        resultat = false;
    }
    return resultat;
}

int ppal (void)
{
    unsigned saisi(0);
    unsigned PartyNum (1);
    const unsigned KMaxPartyNum (550);
    CMat Mat;
    cout << "\033[H\033[2J";
    AfficheFich("CoinFlip.txt");
    cin >> saisi;
    bool Player1Turn (PileouFace(saisi));
    bool Victory (false);

    CPosition PosPlayer1, PosPlayer2;

    CMyParam Param;
    const string config = "../PacMan/Nos_fichiers/config.yaml";

    int RetVal = LoadParams(Param, config);
    if (RetVal != 0)
    {
        return RetVal;
    }


    InitGrid(Mat, Param, PosPlayer1, PosPlayer2);

    DisplayGrid (Mat, Param);


    if(Player1Turn == true)
    {
        cout << "Bravo Joueur 1, vous avez gagné le pile ou face" <<endl;
    }
    else
    {
        cout << "Dommage Joueur 1, vous n'avez pas gagné le pile ou face" << endl;

    }

    string pseudo1;
    string pseudo2;
    cout << "Joueur 1 : Tapez votre pseudo " << endl;
    cin >> pseudo1;
    cout << "Joueur 2 : Tapez votre pseudo " << endl;
    cin >> pseudo2;

    unsigned point1 = 0;
    unsigned point2 = 0;
    while (PartyNum <= KMaxPartyNum && ! Victory)
    {
        cout << "tour numero : " << PartyNum << ", "
             << (Player1Turn ? point1: point2) << " point, "
             << (Player1Turn ? pseudo1 : pseudo2) << ", entrez un déplacement : "
             << endl;

        char Move= 'Y';
        set_input_mode();
        read(STDIN_FILENO, &Move, 1);

        Move = toupper (Move);

        MoveToken (Mat, Move, (Player1Turn ? PosPlayer1: PosPlayer2), (Player1Turn ? point1: point2));
        ClearScreen();
        DisplayGrid (Mat, Param);

        //Victiry test
        if (PosPlayer1 == PosPlayer2 | point1 == 40 | point2 == 80) Victory = true;

        //Increase party's number
        if(Move != 'Y')
            ++PartyNum;

        //Player changing
        if(Move != 'Y')
            Player1Turn = !Player1Turn;
    }//while (no victory)

    if (!Victory)
    {
        Color (KColor.find("KMAgenta")->second);
        cout << "Aucun vainqueur" << endl;
        return 1;
    }

    Color (KColor.find("KGreen")->second);
    cout << "Félicitations Joueur" << (Player1Turn ? '2' : '1')
         << " vous avez gagné :)" << endl;
    Color (KColor.find("KReset")->second);
    ChangClassement(PartyNum,(Player1Turn ? pseudo1 : pseudo2) , "classement.txt");
    AfficheFich("classement.txt");

    return 0;
} //ppal ()
